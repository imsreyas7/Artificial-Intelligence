# -*- coding: utf-8 -*-
"""center_hill.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mdMfTcrzdVwJSC8a2F_ouAdPGqdb28xK
"""

from copy import deepcopy
from math import inf

points = [(1, 1), (4, 9), (6, 4), (5, 2), (7, 7)]
#points = [(7, 1), (9, 4), (4, 2), (2, 3), (1, 7)]

def findNextStates(centre):

    nextStates = []
    if centre[0]>0:
        nextStates.append((centre[0]-1, centre[1]))
    if centre[1]>0:
        nextStates.append((centre[0], centre[1]-1))
    nextStates.append((centre[0]+1, centre[1]))
    nextStates.append((centre[0], centre[1]+1))
    return nextStates

def calcManhattan(points, centre):
    
    cost = 0
    for point in points:
        cost += abs(centre[0]-point[0]) + abs(centre[1]-point[1])
    return cost

def findBestNextState(points, centre):

    nextStates = findNextStates(centre)
    bestNextState = tuple()
    minCost = inf
    for state in nextStates:
        tempCost = calcManhattan(points, state)
        if minCost > tempCost:
            minCost = tempCost
            bestNextState = state
    
    return bestNextState

def HillClimbSearch(points, centre):

    currCost = calcManhattan(points, centre)
    bestNextState = findBestNextState(points, centre)
    nextCost = calcManhattan(points, bestNextState)
    if currCost <= nextCost:
        return centre,currCost
    else:
        return HillClimbSearch(points, bestNextState)

print("Initial : \n")
print("Center : ",(0,0))
print("Manhattan Distance Sum: ",calcManhattan(points,(0,0)))
print()
print("Final : \n")
x,y=HillClimbSearch(points, (0,0))
print("Center :",x)
print("Manhattan Distance Sum :",y)

'''
OUTPUT

Initial : 

Center :  (0, 0)
Manhattan Distance Sum:  46

Final : 

Center : (5, 4)
Manhattan Distance Sum : 21

'''